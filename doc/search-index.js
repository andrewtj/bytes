var N=null,E="",T="t",U="u",searchIndex={};
var R=["reader","writer","bytes::buf","usize","Gets an unsigned 32 bit integer from `self` in the…","Gets an IEEE754 single-precision (4 bytes) floating point…","Gets an IEEE754 double-precision (8 bytes) floating point…","Transfer bytes into `self` from `src` and advance the…","Writes an IEEE754 single-precision (4 bytes) floating…","Writes an IEEE754 double-precision (8 bytes) floating…","bytesmut","is_empty","split_off","Splits the bytes into two at the given index.","split_to","truncate","Shortens the buffer, keeping the first `len` bytes and…","Clears the buffer, removing all data.","Read bytes from a buffer.","remaining","Returns the number of bytes between the current position…","Returns a slice starting at the current position and of…","bytes_vectored","Fills `dst` with potentially multiple slices starting at…","Advance the internal cursor of the Buf","has_remaining","Returns true if there are any more bytes to consume","copy_to_slice","Copies bytes from `self` into `dst`.","Gets an unsigned 8 bit integer from `self`.","Gets a signed 8 bit integer from `self`.","Gets an unsigned 16 bit integer from `self` in big-endian…","get_u16_le","Gets an unsigned 16 bit integer from `self` in…","Gets a signed 16 bit integer from `self` in big-endian…","get_i16_le","Gets a signed 16 bit integer from `self` in little-endian…","get_u32_le","Gets a signed 32 bit integer from `self` in big-endian…","get_i32_le","Gets a signed 32 bit integer from `self` in little-endian…","Gets an unsigned 64 bit integer from `self` in big-endian…","get_u64_le","Gets an unsigned 64 bit integer from `self` in…","Gets a signed 64 bit integer from `self` in big-endian…","get_i64_le","Gets a signed 64 bit integer from `self` in little-endian…","get_u128","Gets an unsigned 128 bit integer from `self` in big-endian…","get_u128_le","Gets an unsigned 128 bit integer from `self` in…","get_i128","Gets a signed 128 bit integer from `self` in big-endian…","get_i128_le","Gets a signed 128 bit integer from `self` in little-endian…","get_uint","Gets an unsigned n-byte integer from `self` in big-endian…","get_uint_le","Gets an unsigned n-byte integer from `self` in…","Gets a signed n-byte integer from `self` in big-endian…","get_int_le","Gets a signed n-byte integer from `self` in little-endian…","get_f32_le","get_f64_le","to_bytes","Consumes remaining bytes inside self and returns new…","A trait for values that provide sequential write access to…","remaining_mut","Returns the number of bytes that can be written from the…","advance_mut","Advance the internal cursor of the BufMut","has_remaining_mut","Returns true if there is space in `self` for more bytes.","bytes_mut","Returns a mutable slice starting at the current BufMut…","bytes_vectored_mut","Fills `dst` with potentially multiple mutable slices…","put_slice","Writes an unsigned 8 bit integer to `self`.","Writes a signed 8 bit integer to `self`.","Writes an unsigned 16 bit integer to `self` in big-endian…","put_u16_le","Writes an unsigned 16 bit integer to `self` in…","Writes a signed 16 bit integer to `self` in big-endian…","put_i16_le","Writes a signed 16 bit integer to `self` in little-endian…","Writes an unsigned 32 bit integer to `self` in big-endian…","put_u32_le","Writes an unsigned 32 bit integer to `self` in…","Writes a signed 32 bit integer to `self` in big-endian…","put_i32_le","Writes a signed 32 bit integer to `self` in little-endian…","Writes an unsigned 64 bit integer to `self` in the…","put_u64_le","Writes an unsigned 64 bit integer to `self` in…","Writes a signed 64 bit integer to `self` in the big-endian…","put_i64_le","Writes a signed 64 bit integer to `self` in little-endian…","put_u128","Writes an unsigned 128 bit integer to `self` in the…","put_u128_le","Writes an unsigned 128 bit integer to `self` in…","Writes a signed 128 bit integer to `self` in the…","put_i128_le","Writes a signed 128 bit integer to `self` in little-endian…","Writes an unsigned n-byte integer to `self` in big-endian…","put_uint_le","Writes an unsigned n-byte integer to `self` in the…","Writes a signed n-byte integer to `self` in big-endian…","put_int_le","Writes a signed n-byte integer to `self` in little-endian…","put_f32_le","put_f64_le","into_iter","borrow_mut","clone_into","try_from","try_into","formatter","ordering","partial_cmp","from_iter","intoiterator","ioslicemut","put_i128","put_uint","BufMutExt","IoSliceMut"];

searchIndex["bytes"]={"doc":"Provides abstractions for working with bytes.","i":[[3,"BytesMut","bytes","A unique reference to a contiguous slice of memory.",N,N],[3,"Bytes",E,"A reference counted contiguous slice of memory.",N,N],[0,"buf",E,"Utilities for working with buffers.",N,N],[3,R[127],R[2],"A buffer type used for `readv`.",N,N],[3,"IntoIter",E,"Iterator over the bytes contained by the buffer.",N,N],[0,"ext",E,"Extra utilities for `Buf` and `BufMut` types.",N,N],[8,"BufExt","bytes::buf::ext","Extra methods for implementations of `Buf`.",N,N],[11,"take",E,"Creates an adaptor which will read at most `limit` bytes…",0,[[[R[3]]],["take"]]],[11,"chain",E,"Creates an adaptor which will chain this buffer with…",0,[[["buf"]],[["chain"],["buf"]]]],[11,R[0],E,"Creates an adaptor which implements the `Read` trait for…",0,[[],[R[0]]]],[8,R[126],E,"Extra methods for implementations of `BufMut`.",N,N],[11,R[1],E,"Creates an adaptor which implements the `Write` trait for…",1,[[],[R[1]]]],[11,"new",R[2],"Creates an iterator over the bytes contained by the buffer.",2,[[[T]],["intoiter"]]],[11,"into_inner",E,"Consumes this `IntoIter`, returning the underlying value.",2,[[],[T]]],[11,"get_ref",E,"Gets a reference to the underlying `Buf`.",2,[[["self"]],[T]]],[11,"get_mut",E,"Gets a mutable reference to the underlying `Buf`.",2,[[["self"]],[T]]],[8,"Buf",E,R[18],N,N],[10,R[19],E,R[20],3,[[["self"]],[R[3]]]],[10,"bytes",E,R[21],3,[[["self"]]]],[11,R[22],E,R[23],3,[[["self"]],[R[3]]]],[10,"advance",E,R[24],3,[[["self"],[R[3]]]]],[11,R[25],E,R[26],3,[[["self"]],["bool"]]],[11,R[27],E,R[28],3,[[["self"]]]],[11,"get_u8",E,R[29],3,[[["self"]],["u8"]]],[11,"get_i8",E,R[30],3,[[["self"]],["i8"]]],[11,"get_u16",E,R[31],3,[[["self"]],["u16"]]],[11,R[32],E,R[33],3,[[["self"]],["u16"]]],[11,"get_i16",E,R[34],3,[[["self"]],["i16"]]],[11,R[35],E,R[36],3,[[["self"]],["i16"]]],[11,"get_u32",E,R[4],3,[[["self"]],["u32"]]],[11,R[37],E,R[4],3,[[["self"]],["u32"]]],[11,"get_i32",E,R[38],3,[[["self"]],["i32"]]],[11,R[39],E,R[40],3,[[["self"]],["i32"]]],[11,"get_u64",E,R[41],3,[[["self"]],["u64"]]],[11,R[42],E,R[43],3,[[["self"]],["u64"]]],[11,"get_i64",E,R[44],3,[[["self"]],["i64"]]],[11,R[45],E,R[46],3,[[["self"]],["i64"]]],[11,R[47],E,R[48],3,[[["self"]],["u128"]]],[11,R[49],E,R[50],3,[[["self"]],["u128"]]],[11,R[51],E,R[52],3,[[["self"]],["i128"]]],[11,R[53],E,R[54],3,[[["self"]],["i128"]]],[11,R[55],E,R[56],3,[[["self"],[R[3]]],["u64"]]],[11,R[57],E,R[58],3,[[["self"],[R[3]]],["u64"]]],[11,"get_int",E,R[59],3,[[["self"],[R[3]]],["i64"]]],[11,R[60],E,R[61],3,[[["self"],[R[3]]],["i64"]]],[11,"get_f32",E,R[5],3,[[["self"]],["f32"]]],[11,R[62],E,R[5],3,[[["self"]],["f32"]]],[11,"get_f64",E,R[6],3,[[["self"]],["f64"]]],[11,R[63],E,R[6],3,[[["self"]],["f64"]]],[11,R[64],E,R[65],3,[[["self"]],["bytes"]]],[8,"BufMut",E,R[66],N,N],[10,R[67],E,R[68],4,[[["self"]],[R[3]]]],[10,R[69],E,R[70],4,[[["self"],[R[3]]]]],[11,R[71],E,R[72],4,[[["self"]],["bool"]]],[10,R[73],E,R[74],4,[[["self"]]]],[11,R[75],E,R[76],4,[[["self"]],[R[3]]]],[11,"put",E,R[7],4,[[["self"],["buf"]]]],[11,R[77],E,R[7],4,[[["self"]]]],[11,"put_u8",E,R[78],4,[[["self"],["u8"]]]],[11,"put_i8",E,R[79],4,[[["self"],["i8"]]]],[11,"put_u16",E,R[80],4,[[["self"],["u16"]]]],[11,R[81],E,R[82],4,[[["self"],["u16"]]]],[11,"put_i16",E,R[83],4,[[["self"],["i16"]]]],[11,R[84],E,R[85],4,[[["self"],["i16"]]]],[11,"put_u32",E,R[86],4,[[["self"],["u32"]]]],[11,R[87],E,R[88],4,[[["self"],["u32"]]]],[11,"put_i32",E,R[89],4,[[["self"],["i32"]]]],[11,R[90],E,R[91],4,[[["self"],["i32"]]]],[11,"put_u64",E,R[92],4,[[["self"],["u64"]]]],[11,R[93],E,R[94],4,[[["self"],["u64"]]]],[11,"put_i64",E,R[95],4,[[["self"],["i64"]]]],[11,R[96],E,R[97],4,[[["self"],["i64"]]]],[11,R[98],E,R[99],4,[[["self"],["u128"]]]],[11,R[100],E,R[101],4,[[["self"],["u128"]]]],[11,R[124],E,R[102],4,[[["self"],["i128"]]]],[11,R[103],E,R[104],4,[[["self"],["i128"]]]],[11,R[125],E,R[105],4,[[["self"],["u64"],[R[3]]]]],[11,R[106],E,R[107],4,[[["self"],["u64"],[R[3]]]]],[11,"put_int",E,R[108],4,[[["self"],["i64"],[R[3]]]]],[11,R[109],E,R[110],4,[[["self"],["i64"],[R[3]]]]],[11,"put_f32",E,R[8],4,[[["self"],["f32"]]]],[11,R[111],E,R[8],4,[[["self"],["f32"]]]],[11,"put_f64",E,R[9],4,[[["self"],["f64"]]]],[11,R[112],E,R[9],4,[[["self"],["f64"]]]],[11,"with_capacity","bytes","Creates a new `BytesMut` with the specified capacity.",5,[[[R[3]]],[R[10]]]],[11,"new",E,"Creates a new `BytesMut` with default capacity.",5,[[],[R[10]]]],[11,"len",E,"Returns the number of bytes contained in this `BytesMut`.",5,[[["self"]],[R[3]]]],[11,R[11],E,"Returns true if the `BytesMut` has a length of 0.",5,[[["self"]],["bool"]]],[11,"capacity",E,"Returns the number of bytes the `BytesMut` can hold…",5,[[["self"]],[R[3]]]],[11,"freeze",E,"Converts `self` into an immutable `Bytes`.",5,[[],["bytes"]]],[11,R[12],E,R[13],5,[[["self"],[R[3]]],[R[10]]]],[11,"split",E,"Removes the bytes from the current view, returning them in…",5,[[["self"]],[R[10]]]],[11,R[14],E,"Splits the buffer into two at the given index.",5,[[["self"],[R[3]]],[R[10]]]],[11,R[15],E,R[16],5,[[["self"],[R[3]]]]],[11,"clear",E,R[17],5,[[["self"]]]],[11,"resize",E,"Resizes the buffer so that `len` is equal to `new_len`.",5,[[["self"],[R[3]],["u8"]]]],[11,"set_len",E,"Sets the length of the buffer.",5,[[["self"],[R[3]]]]],[11,"reserve",E,"Reserves capacity for at least `additional` more bytes to…",5,[[["self"],[R[3]]]]],[11,"extend_from_slice",E,"Appends given bytes to this object.",5,[[["self"]]]],[11,"unsplit",E,"Combine splitted BytesMut objects back as contiguous.",5,[[["self"],[R[10]]]]],[11,"new",E,"Creates a new empty `Bytes`.",6,[[],["bytes"]]],[11,"from_static",E,"Creates a new `Bytes` from a static slice.",6,[[],["bytes"]]],[11,"len",E,"Returns the number of bytes contained in this `Bytes`.",6,[[["self"]],[R[3]]]],[11,R[11],E,"Returns true if the `Bytes` has a length of 0.",6,[[["self"]],["bool"]]],[11,"copy_from_slice",E,"Creates `Bytes` instance from slice, by copying it.",6,[[],["self"]]],[11,"slice",E,"Returns a slice of self for the provided range.",6,[[["self"]],["bytes"]]],[11,"slice_ref",E,"Returns a slice of self that is equivalent to the given…",6,[[["self"]],["bytes"]]],[11,R[12],E,R[13],6,[[["self"],[R[3]]],["bytes"]]],[11,R[14],E,R[13],6,[[["self"],[R[3]]],["bytes"]]],[11,R[15],E,R[16],6,[[["self"],[R[3]]]]],[11,"clear",E,R[17],6,[[["self"]]]],[8,"Buf",E,R[18],N,N],[10,R[19],E,R[20],3,[[["self"]],[R[3]]]],[10,"bytes",E,R[21],3,[[["self"]]]],[11,R[22],R[2],R[23],3,[[["self"]],[R[3]]]],[10,"advance","bytes",R[24],3,[[["self"],[R[3]]]]],[11,R[25],R[2],R[26],3,[[["self"]],["bool"]]],[11,R[27],E,R[28],3,[[["self"]]]],[11,"get_u8",E,R[29],3,[[["self"]],["u8"]]],[11,"get_i8",E,R[30],3,[[["self"]],["i8"]]],[11,"get_u16",E,R[31],3,[[["self"]],["u16"]]],[11,R[32],E,R[33],3,[[["self"]],["u16"]]],[11,"get_i16",E,R[34],3,[[["self"]],["i16"]]],[11,R[35],E,R[36],3,[[["self"]],["i16"]]],[11,"get_u32",E,R[4],3,[[["self"]],["u32"]]],[11,R[37],E,R[4],3,[[["self"]],["u32"]]],[11,"get_i32",E,R[38],3,[[["self"]],["i32"]]],[11,R[39],E,R[40],3,[[["self"]],["i32"]]],[11,"get_u64",E,R[41],3,[[["self"]],["u64"]]],[11,R[42],E,R[43],3,[[["self"]],["u64"]]],[11,"get_i64",E,R[44],3,[[["self"]],["i64"]]],[11,R[45],E,R[46],3,[[["self"]],["i64"]]],[11,R[47],E,R[48],3,[[["self"]],["u128"]]],[11,R[49],E,R[50],3,[[["self"]],["u128"]]],[11,R[51],E,R[52],3,[[["self"]],["i128"]]],[11,R[53],E,R[54],3,[[["self"]],["i128"]]],[11,R[55],E,R[56],3,[[["self"],[R[3]]],["u64"]]],[11,R[57],E,R[58],3,[[["self"],[R[3]]],["u64"]]],[11,"get_int",E,R[59],3,[[["self"],[R[3]]],["i64"]]],[11,R[60],E,R[61],3,[[["self"],[R[3]]],["i64"]]],[11,"get_f32",E,R[5],3,[[["self"]],["f32"]]],[11,R[62],E,R[5],3,[[["self"]],["f32"]]],[11,"get_f64",E,R[6],3,[[["self"]],["f64"]]],[11,R[63],E,R[6],3,[[["self"]],["f64"]]],[11,R[64],E,R[65],3,[[["self"]],["bytes"]]],[8,"BufMut","bytes",R[66],N,N],[10,R[67],E,R[68],4,[[["self"]],[R[3]]]],[10,R[69],E,R[70],4,[[["self"],[R[3]]]]],[11,R[71],R[2],R[72],4,[[["self"]],["bool"]]],[10,R[73],"bytes",R[74],4,[[["self"]]]],[11,R[75],R[2],R[76],4,[[["self"]],[R[3]]]],[11,"put",E,R[7],4,[[["self"],["buf"]]]],[11,R[77],E,R[7],4,[[["self"]]]],[11,"put_u8",E,R[78],4,[[["self"],["u8"]]]],[11,"put_i8",E,R[79],4,[[["self"],["i8"]]]],[11,"put_u16",E,R[80],4,[[["self"],["u16"]]]],[11,R[81],E,R[82],4,[[["self"],["u16"]]]],[11,"put_i16",E,R[83],4,[[["self"],["i16"]]]],[11,R[84],E,R[85],4,[[["self"],["i16"]]]],[11,"put_u32",E,R[86],4,[[["self"],["u32"]]]],[11,R[87],E,R[88],4,[[["self"],["u32"]]]],[11,"put_i32",E,R[89],4,[[["self"],["i32"]]]],[11,R[90],E,R[91],4,[[["self"],["i32"]]]],[11,"put_u64",E,R[92],4,[[["self"],["u64"]]]],[11,R[93],E,R[94],4,[[["self"],["u64"]]]],[11,"put_i64",E,R[95],4,[[["self"],["i64"]]]],[11,R[96],E,R[97],4,[[["self"],["i64"]]]],[11,R[98],E,R[99],4,[[["self"],["u128"]]]],[11,R[100],E,R[101],4,[[["self"],["u128"]]]],[11,R[124],E,R[102],4,[[["self"],["i128"]]]],[11,R[103],E,R[104],4,[[["self"],["i128"]]]],[11,R[125],E,R[105],4,[[["self"],["u64"],[R[3]]]]],[11,R[106],E,R[107],4,[[["self"],["u64"],[R[3]]]]],[11,"put_int",E,R[108],4,[[["self"],["i64"],[R[3]]]]],[11,R[109],E,R[110],4,[[["self"],["i64"],[R[3]]]]],[11,"put_f32",E,R[8],4,[[["self"],["f32"]]]],[11,R[111],E,R[8],4,[[["self"],["f32"]]]],[11,"put_f64",E,R[9],4,[[["self"],["f64"]]]],[11,R[112],E,R[9],4,[[["self"],["f64"]]]],[11,R[113],"bytes",E,5,[[],["i"]]],[11,R[116],E,E,5,[[[U]],["result"]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[117],E,E,5,[[],["result"]]],[11,"borrow",E,E,5,[[["self"]],[T]]],[11,R[114],E,E,5,[[["self"]],[T]]],[11,"type_id",E,E,5,[[["self"]],["typeid"]]],[11,"to_owned",E,E,5,[[["self"]],[T]]],[11,R[115],E,E,5,[[["self"],[T]]]],[11,R[113],E,E,6,[[],["i"]]],[11,R[116],E,E,6,[[[U]],["result"]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[117],E,E,6,[[],["result"]]],[11,"borrow",E,E,6,[[["self"]],[T]]],[11,R[114],E,E,6,[[["self"]],[T]]],[11,"type_id",E,E,6,[[["self"]],["typeid"]]],[11,"to_owned",E,E,6,[[["self"]],[T]]],[11,R[115],E,E,6,[[["self"],[T]]]],[11,R[116],R[2],E,7,[[[U]],["result"]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[117],E,E,7,[[],["result"]]],[11,"borrow",E,E,7,[[["self"]],[T]]],[11,R[114],E,E,7,[[["self"]],[T]]],[11,"type_id",E,E,7,[[["self"]],["typeid"]]],[11,R[113],E,E,2,[[],["i"]]],[11,R[116],E,E,2,[[[U]],["result"]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[117],E,E,2,[[],["result"]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[114],E,E,2,[[["self"]],[T]]],[11,"type_id",E,E,2,[[["self"]],["typeid"]]],[11,R[19],"bytes",E,5,[[["self"]],[R[3]]]],[11,"bytes",E,E,5,[[["self"]]]],[11,"advance",E,E,5,[[["self"],[R[3]]]]],[11,R[64],E,E,5,[[["self"]],["bytes"]]],[11,R[19],E,E,6,[[["self"]],[R[3]]]],[11,"bytes",E,E,6,[[["self"]]]],[11,"advance",E,E,6,[[["self"],[R[3]]]]],[11,R[64],E,E,6,[[["self"]],["bytes"]]],[11,R[67],E,E,5,[[["self"]],[R[3]]]],[11,R[69],E,E,5,[[["self"],[R[3]]]]],[11,R[73],E,E,5,[[["self"]]]],[11,"fmt",R[2],E,7,[[["self"],[R[118]]],["result"]]],[11,"fmt",E,E,2,[[["self"],[R[118]]],["result"]]],[11,"fmt","bytes",E,5,[[["self"],[R[118]]],["result"]]],[11,"fmt",E,E,6,[[["self"],[R[118]]],["result"]]],[11,"eq",E,E,5,[[["self"],[R[10]]],["bool"]]],[11,"eq",E,E,5,[[["self"]],["bool"]]],[11,"eq",E,E,5,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,5,[[["self"],["vec"]],["bool"]]],[11,"eq",E,E,5,[[["self"],["string"]],["bool"]]],[11,"eq",E,E,5,[[["self"],[T]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[10]]],["bool"]]],[11,"eq",E,E,5,[[["self"],["bytes"]],["bool"]]],[11,"eq",E,E,6,[[["self"],["bytes"]],["bool"]]],[11,"eq",E,E,6,[[["self"]],["bool"]]],[11,"eq",E,E,6,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,6,[[["self"],["vec"]],["bool"]]],[11,"eq",E,E,6,[[["self"],["string"]],["bool"]]],[11,"eq",E,E,6,[[["self"],[T]],["bool"]]],[11,"cmp",E,E,5,[[["self"],[R[10]]],[R[119]]]],[11,"cmp",E,E,6,[[["self"],["bytes"]],[R[119]]]],[11,R[120],E,E,5,[[["self"],[R[10]]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,5,[[["self"]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,5,[[["self"],["str"]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,5,[[["self"],["vec"]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,5,[[["self"],["string"]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,5,[[["self"],[T]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,6,[[["self"],["bytes"]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,6,[[["self"]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,6,[[["self"],["str"]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,6,[[["self"],["vec"]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,6,[[["self"],["string"]],[[R[119]],["option",[R[119]]]]]],[11,R[120],E,E,6,[[["self"],[T]],[[R[119]],["option",[R[119]]]]]],[11,"deref",E,E,5,[[["self"]]]],[11,"deref",E,E,6,[[["self"]]]],[11,"deref_mut",E,E,5,[[["self"]]]],[11,"drop",E,E,5,[[["self"]]]],[11,"drop",E,E,6,[[["self"]]]],[11,"hash",E,E,5,[[["self"],["h"]]]],[11,"hash",E,E,6,[[["self"],["h"]]]],[11,"next",R[2],E,2,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"size_hint",E,E,2,[[["self"]]]],[11,R[121],"bytes",E,5,[[[R[122]]],["self"]]],[11,R[121],E,E,5,[[[R[122]]],["self"]]],[11,R[121],E,E,6,[[[R[122]]],["self"]]],[11,R[113],E,E,5,[[]]],[11,R[113],E,E,6,[[]]],[11,"extend",E,E,5,[[["self"],[T]]]],[11,"extend",E,E,5,[[["self"],[T]]]],[11,"write_str",E,E,5,[[["self"],["str"]],["result"]]],[11,"write_fmt",E,E,5,[[["self"],["arguments"]],["result"]]],[11,"as_ref",E,E,5,[[["self"]]]],[11,"as_ref",E,E,6,[[["self"]]]],[11,"as_mut",E,E,5,[[["self"]]]],[11,"from",R[2],E,7,[[],[R[123]]]],[11,"from",E,E,7,[[],[R[123]]]],[11,"from","bytes",E,5,[[],[R[10]]]],[11,"from",E,E,5,[[["str"]],[R[10]]]],[11,"from",E,E,6,[[],["bytes"]]],[11,"from",E,E,6,[[["str"]],["bytes"]]],[11,"from",E,E,6,[[["vec",["u8"]],["u8"]],["bytes"]]],[11,"from",E,E,6,[[["string"]],["bytes"]]],[11,"fmt",E,E,6,[[["self"],[R[118]]],["result"]]],[11,"fmt",E,E,5,[[["self"],[R[118]]],["result"]]],[11,"fmt",E,E,6,[[["self"],[R[118]]],["result"]]],[11,"fmt",E,E,5,[[["self"],[R[118]]],["result"]]],[11,"clone",E,E,5,[[["self"]],[R[10]]]],[11,"clone",E,E,6,[[["self"]],["bytes"]]],[11,"default",E,E,5,[[],[R[10]]]],[11,"default",E,E,6,[[],["bytes"]]],[11,"borrow",E,E,5,[[["self"]]]],[11,"borrow",E,E,6,[[["self"]]]],[11,R[114],E,E,5,[[["self"]]]],[11,R[22],R[2],R[23],3,[[["self"]],[R[3]]]],[11,R[25],E,R[26],3,[[["self"]],["bool"]]],[11,R[27],E,R[28],3,[[["self"]]]],[11,"get_u8",E,R[29],3,[[["self"]],["u8"]]],[11,"get_i8",E,R[30],3,[[["self"]],["i8"]]],[11,"get_u16",E,R[31],3,[[["self"]],["u16"]]],[11,R[32],E,R[33],3,[[["self"]],["u16"]]],[11,"get_i16",E,R[34],3,[[["self"]],["i16"]]],[11,R[35],E,R[36],3,[[["self"]],["i16"]]],[11,"get_u32",E,R[4],3,[[["self"]],["u32"]]],[11,R[37],E,R[4],3,[[["self"]],["u32"]]],[11,"get_i32",E,R[38],3,[[["self"]],["i32"]]],[11,R[39],E,R[40],3,[[["self"]],["i32"]]],[11,"get_u64",E,R[41],3,[[["self"]],["u64"]]],[11,R[42],E,R[43],3,[[["self"]],["u64"]]],[11,"get_i64",E,R[44],3,[[["self"]],["i64"]]],[11,R[45],E,R[46],3,[[["self"]],["i64"]]],[11,R[47],E,R[48],3,[[["self"]],["u128"]]],[11,R[49],E,R[50],3,[[["self"]],["u128"]]],[11,R[51],E,R[52],3,[[["self"]],["i128"]]],[11,R[53],E,R[54],3,[[["self"]],["i128"]]],[11,R[55],E,R[56],3,[[["self"],[R[3]]],["u64"]]],[11,R[57],E,R[58],3,[[["self"],[R[3]]],["u64"]]],[11,"get_int",E,R[59],3,[[["self"],[R[3]]],["i64"]]],[11,R[60],E,R[61],3,[[["self"],[R[3]]],["i64"]]],[11,"get_f32",E,R[5],3,[[["self"]],["f32"]]],[11,R[62],E,R[5],3,[[["self"]],["f32"]]],[11,"get_f64",E,R[6],3,[[["self"]],["f64"]]],[11,R[63],E,R[6],3,[[["self"]],["f64"]]],[11,R[64],E,R[65],3,[[["self"]],["bytes"]]],[11,R[71],E,R[72],4,[[["self"]],["bool"]]],[11,R[75],E,R[76],4,[[["self"]],[R[3]]]],[11,"put",E,R[7],4,[[["self"],["buf"]]]],[11,R[77],E,R[7],4,[[["self"]]]],[11,"put_u8",E,R[78],4,[[["self"],["u8"]]]],[11,"put_i8",E,R[79],4,[[["self"],["i8"]]]],[11,"put_u16",E,R[80],4,[[["self"],["u16"]]]],[11,R[81],E,R[82],4,[[["self"],["u16"]]]],[11,"put_i16",E,R[83],4,[[["self"],["i16"]]]],[11,R[84],E,R[85],4,[[["self"],["i16"]]]],[11,"put_u32",E,R[86],4,[[["self"],["u32"]]]],[11,R[87],E,R[88],4,[[["self"],["u32"]]]],[11,"put_i32",E,R[89],4,[[["self"],["i32"]]]],[11,R[90],E,R[91],4,[[["self"],["i32"]]]],[11,"put_u64",E,R[92],4,[[["self"],["u64"]]]],[11,R[93],E,R[94],4,[[["self"],["u64"]]]],[11,"put_i64",E,R[95],4,[[["self"],["i64"]]]],[11,R[96],E,R[97],4,[[["self"],["i64"]]]],[11,R[98],E,R[99],4,[[["self"],["u128"]]]],[11,R[100],E,R[101],4,[[["self"],["u128"]]]],[11,R[124],E,R[102],4,[[["self"],["i128"]]]],[11,R[103],E,R[104],4,[[["self"],["i128"]]]],[11,R[125],E,R[105],4,[[["self"],["u64"],[R[3]]]]],[11,R[106],E,R[107],4,[[["self"],["u64"],[R[3]]]]],[11,"put_int",E,R[108],4,[[["self"],["i64"],[R[3]]]]],[11,R[109],E,R[110],4,[[["self"],["i64"],[R[3]]]]],[11,"put_f32",E,R[8],4,[[["self"],["f32"]]]],[11,R[111],E,R[8],4,[[["self"],["f32"]]]],[11,"put_f64",E,R[9],4,[[["self"],["f64"]]]],[11,R[112],E,R[9],4,[[["self"],["f64"]]]]],"p":[[8,"BufExt"],[8,R[126]],[3,"IntoIter"],[8,"Buf"],[8,"BufMut"],[3,"BytesMut"],[3,"Bytes"],[3,R[127]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);